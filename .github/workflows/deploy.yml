#name: Deploy To EC2
#
#on:
#  push:
#    branches:
#      - main
#
#jobs:
#  Deploy:
#    runs-on: ubuntu-latest
#    steps:
#      - name: 깃허브 레포지토리 불러오기
#        uses: actions/checkout@v4
#
#      - name: JDK 17 설치하기
#        uses: actions/setup-java@v4
#        with:
#          distribution: corretto
#          java-version: 17
#
#      - name: application.properties 추가하기
#        run: |
#          mkdir -p src/main/resources
#          echo "${{ secrets.APPLICATION_PROPERTIES }}" > src/main/resources/application.properties
#
#      - name: 테스트 및 빌드하기
#        run: ./gradlew clean build
#
#      - name: 빌드된 파일 이름 변경하기
#        run: mv ./build/libs/*SNAPSHOT.jar ./project.jar
#
#      - name: SCP로 EC2에 빌드된 파일 전송하기
#        uses: appleboy/scp-action@v0.1.7
#        with:
#          host: ${{ secrets.EC2_HOST }}
#          username: ${{ secrets.EC2_USERNAME }}
#          key: ${{ secrets.EC2_PRIVATE_KEY }}
#          source: project.jar
#          target: /home/ubuntu/hello-blog-api-dev-server/tobe
#
#      - name: SSH로 EC2에 접속하기
#        uses: appleboy/ssh-action@v1.0.3
#        env:
#          APPLICATION_PROPERTIES: ${{ secrets.APPLICATION_PROPERTIES }}
#        with:
#          host: ${{ secrets.EC2_HOST }}
#          username: ${{ secrets.EC2_USERNAME }}
#          key: ${{ secrets.EC2_PRIVATE_KEY }}
#          source: project.jar
#          target: /home/ubuntu/hello-blog-api-dev-server/tobe
#          script_stop: true
#          script: |
#            rm -rf /home/ubuntu/hello-blog-api-dev-server/current
#            mkdir /home/ubuntu/hello-blog-api-dev-server/current
#            mv /home/ubuntu/hello-blog-api-dev-server/tobe/project.jar /home/ubuntu/hello-blog-api-dev-server/current/project.jar
#            cd /home/ubuntu/hello-blog-api-dev-server/current
#            sudo fuser -k -n tcp 8080 || true
#            nohup java -jar project.jar > ./output.log 2>&1 &
#            rm -rf /home/ubuntu/hello-blog-api-dev-server/tobe

name: Deploy To EC2

on:
  push:
    branches:
      - main

jobs:
  Deploy:
    runs-on: ubuntu-latest
    steps:
      - name: 깃허브 레포지토리 불러오기
        uses: actions/checkout@v4

      - name: application.properties 추가하기
        run: |
          mkdir -p src/main/resources
          echo "${{ secrets.APPLICATION_PROPERTIES }}" > src/main/resources/application.properties

      - name: sshpass 설치하기
        run: sudo apt-get install -y sshpass

      - name: 맥북에 연결 테스트
        run: |
          echo "맥북에 SSH 연결을 테스트합니다..."
          sshpass -p "${{ secrets.MAC_PASSWORD }}" ssh -o StrictHostKeyChecking=no ${{ secrets.MAC_USERNAME }}@${{ secrets.MAC_HOST }} "echo 연결 성공"

      - name: 소스코드를 맥북으로 전송하기
        run: |
          echo "소스 코드를 맥북으로 전송합니다..."
          sshpass -p "${{ secrets.MAC_PASSWORD }}" scp -o StrictHostKeyChecking=no -r . ${{ secrets.MAC_USERNAME }}@${{ secrets.MAC_HOST }}:/Users/${{ secrets.MAC_USERNAME }}/build-temp

      - name: 맥북에서 테스트 및 빌드하기
        run: |
          sshpass -p "${{ secrets.MAC_PASSWORD }}" ssh -o StrictHostKeyChecking=no ${{ secrets.MAC_USERNAME }}@${{ secrets.MAC_HOST }} << EOF
            cd ~/build-temp
            ./gradlew clean build
            mv ./build/libs/*SNAPSHOT.jar ~/built_project.jar
          EOF

      - name: 맥북에서 EC2로 빌드된 파일 전송 및 배포하기
        run: |
          sshpass -p "${{ secrets.MAC_PASSWORD }}" ssh -o StrictHostKeyChecking=no ${{ secrets.MAC_USERNAME }}@${{ secrets.MAC_HOST }} << EOF
            sshpass -p "${{ secrets.EC2_PASSWORD }}" scp -o StrictHostKeyChecking=no ~/built_project.jar ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }}:/home/ubuntu/hello-blog-api-dev-server/tobe/built_project.jar
            sshpass -p "${{ secrets.EC2_PASSWORD }}" ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} << EEC2
              rm -rf /home/ubuntu/hello-blog-api-dev-server/current
              mkdir /home/ubuntu/hello-blog-api-dev-server/current
              mv /home/ubuntu/hello-blog-api-dev-server/tobe/built_project.jar /home/ubuntu/hello-blog-api-dev-server/current/built_project.jar
              cd /home/ubuntu/hello-blog-api-dev-server/current
              sudo fuser -k -n tcp 8080 || true
              nohup java -jar built_project.jar > ./output.log 2>&1 &
              rm -rf /home/ubuntu/hello-blog-api-dev-server/tobe
            EEC2
          EOF

      - name: 맥북의 임시 폴더 삭제하기
        run: |
          sshpass -p "${{ secrets.MAC_PASSWORD }}" ssh -o StrictHostKeyChecking=no ${{ secrets.MAC_USERNAME }}@${{ secrets.MAC_HOST }} << EOF
            rm -rf ~/build-temp
          EOF









