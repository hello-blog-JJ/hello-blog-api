<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.jj.hello_blog.domain.category.repository.CategoryMapper">

    <resultMap id="CategoryResponseMap" type="CategoryResponse">
        <result property="id" column="id"/>
        <result property="name" column="name"/>
        <result property="thumbUrl" column="thumbUrl"/>
        <result property="parentId" column="parentId"/>
        <result property="createdAt" column="createdAt"/>
        <result property="postCount" column="postCount"/>
    </resultMap>

    <!-- 카테고리 인서트 -->
    <insert id="insertCategory" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO category(name, thumb_url, parent_id)
        VALUES (#{name}, #{thumbUrl}, #{parentId})
    </insert>

    <!-- id로 카테고리 조회 -->
    <select id="selectCategoryById" resultType="Category">
        SELECT id, name, thumb_url, parent_id, created_at
        FROM category
        WHERE id = #{id}
    </select>

    <!-- name으로 카테고리 조회 -->
    <select id="selectCategoriesByName" resultType="Category">
        SELECT id, name, thumb_url, parent_id, created_at
        FROM category
        WHERE name = #{name}
    </select>

    <!-- id의 모든 하위 카테고리 조회 -->
    <select id="selectAllSubCategoriesById" resultType="Category">
        WITH RECURSIVE AllChildren AS (SELECT id,
                                              name,
                                              thumb_url,
                                              parent_id,
                                              created_at
                                       FROM category
                                       WHERE id = #{id}

                                       UNION ALL

                                       SELECT children.id,
                                              children.name,
                                              children.thumb_url,
                                              children.parent_id,
                                              children.created_at
                                       FROM category children
                                                INNER JOIN AllChildren ac ON children.parent_id = ac.id)

        SELECT id         AS id,
               name       AS name,
               thumb_url  AS thumbUrl,
               parent_id  AS parentId,
               created_at AS createdAt
        FROM AllChildren;
    </select>


    <!-- 카테고리랑 카테고리에 게시된 글 수 조인  -->
    <select id="selectCategoryAndPostCountJoinPostById" resultMap="CategoryResponseMap">
        SELECT c.id                    AS id,
               c.name                  AS name,
               c.thumb_url             AS thumbUrl,
               c.parent_id             AS parentId,
               c.created_at            AS createdAt,
               IFNULL(p.post_count, 0) AS postCount
        FROM category c
                 LEFT JOIN (SELECT category_id,
                                   COUNT(*) AS post_count
                            FROM post
                            GROUP BY category_id) p ON c.id = p.category_id
        WHERE c.id = #{id}
    </select>

    <!-- 최상위 카테고리와 그 하위 카테고리를 포함하여, 총 게시된 글의 수를 조회 -->
    <select id="selectCategoriesWhereParentIdIsNull" resultMap="CategoryResponseMap">
        WITH RECURSIVE CategoryHierarchy AS (SELECT id AS category_id,
                                                    id AS top_category_id,
                                                    parent_id
                                             FROM category
                                             WHERE parent_id IS NULL

                                             UNION ALL

                                             SELECT c.id AS category_id,
                                                    ch.top_category_id,
                                                    c.parent_id
                                             FROM category c
                                                      INNER JOIN
                                                  CategoryHierarchy ch ON c.parent_id = ch.category_id)

        SELECT ch.top_category_id AS id,
               c.name             AS name,
               c.thumb_url        AS thumbUrl,
               c.parent_id        AS parentId,
               c.created_at       AS createdAt,
               COUNT(p.id)        AS postCount
        FROM CategoryHierarchy ch
                 INNER JOIN
             category c ON c.id = ch.top_category_id
                 LEFT JOIN
             post p ON p.category_id = ch.category_id
        GROUP BY ch.top_category_id, c.name, c.parent_id
        ORDER BY ch.top_category_id;
    </select>

    <!-- 부모 카테고리와 그 직속 카테고리를 포함하여, 각 카테고리에 게시된 글의 수를 조회 -->
    <select id="selectCategoriesByParentId" resultMap="CategoryResponseMap">
        SELECT parent.id               AS id,
               parent.name             AS name,
               parent.thumb_url        AS thumbUrl,
               parent.parent_id        AS parentId,
               parent.created_at       AS createdAt,
               IFNULL(p.post_count, 0) AS postCount
        FROM category parent
                 LEFT JOIN (SELECT category_id,
                                   COUNT(*) AS post_count
                            FROM post
                            GROUP BY category_id) p ON parent.id = p.category_id
        WHERE parent.id = #{parentId}

        UNION ALL

        SELECT children.id             AS id,
               children.name           AS name,
               children.thumb_url      AS thumbUrl,
               children.parent_id      AS parentId,
               children.created_at     AS createdAt,
               IFNULL(p.post_count, 0) AS postCount
        FROM category children
                 LEFT JOIN (SELECT category_id,
                                   COUNT(*) AS post_count
                            FROM post
                            GROUP BY category_id) p ON children.id = p.category_id
        WHERE children.parent_id = #{parentId}
    </select>

    <!-- 카테고리 수정 -->
    <update id="updateCategoryById">
        UPDATE category
        SET name      = #{name},
            thumb_url = #{thumbUrl},
            parent_id = #{parentId}
        WHERE id = #{id}
    </update>

    <!-- 카테고리 삭제 -->
    <delete id="deleteCategoryById">
        DELETE
        FROM category
        WHERE id = #{id};
    </delete>

</mapper>
